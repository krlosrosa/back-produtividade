import { type HttpResponse, type Controller } from '../protocols'
import { type Validator } from '../../validation/protocols/validator'
import { badRequest, ok, serverError } from '../helpers'
import { type {{pascalCase name}} } from '@/domain/usecases'


export class {{pascalCase name}}Controller implements Controller {
  constructor(
    private readonly {{camelCase name}}: {{pascalCase name}},
    private readonly validator: Validator,
  ) {}

  async handle(request: {{pascalCase name}}Controller.Request): Promise<HttpResponse> {
    try {
      const error = this.validator.isValid(request);
      if (!error.isValid) return badRequest(error.error);
      const response = await this.{{camelCase name}}.{{camelCase metodo}}(request);
      return ok(response);
    } catch (err) {
      return serverError(err);
    }
  }
}

export namespace {{pascalCase name}}Controller {
  export type Request = {}
  export type Result = {}
}
